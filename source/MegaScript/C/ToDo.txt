-Make operations calculate in chunks rather than doing it all at the end when the operation is finished. This will save stack space.
-Make strings create char arrays.
-Make sure that the script environment memory pointer is zero when real addresses are used. This way, old code that offsets the memory pointer will still work.
-Make all arithmetic comply with the read-only flag.
-Make multi-dimensional arrays
-Make object callbacks push a pointer to the argument code.
-Make objects use ids instead of pointers. That or change all the objects on the stack and on the symbol table to be 0 when they're deleted.
-Make deleting an object delete all descendants too.
-Make it impossible to set an object's parent to a descendent of that object.
-Add the ability for the master script to change privilege levels of standard calls.
-Add waits for memory allocation so that scripts running under different threads don't try changing the sections at the same time as this could cause a segmentation fault.
-Make a fith list for structs that allows for storage of settings for each element. This will be useful for C-Like pointer elements, as well as privilege levels.
-Make bools create a typedef like structs.
-For events, make an array of pointers to functions, that way they can be executed as soon as the event goes off, and they also can have multiple events.
-Locate and destroy all memory leaks. (There are likely to be some caused by RefreshStackData())
-Add structs. Struct data type first (1), then list pointer (4/8), and finally the data (?).
-Add a PushStack and PopStack function that automatically handles regular stack data, and complex stack data like structs.
-Make require link the symbols from a script instead of copying them all
-Add an option for objects to be stored in C, and another to be stored in MegaScript
-Make sure to make element symbol names allocate new memory so that copied symbols don't crash the program if a script is deleted.
-Add string concatination with +
-Make a file system library
-Make a change script state function
-Maybe make it not possible to directly assign arrays to prevent memory issues
-Create "internal" keyword and precursor which makes a symbol without storing a symbol name in the code.
-Make arithmetic operations execute while the stack is still being pushed to
-Make arrays and pointers share the same dimension. They use the same code anyway.
-Make it possible to #define lambda functions (For some reason that I forgot)
-Create a quick get debris function that gets the stack data of a debris item, and then deletes the debris
-Make sure to add debris expanding to the majority of arithmetic operations
-Make the string bytecode create a debris item with a new string
-Make a way to directly write code to an address (Exampe: write(0, "int a = 1"))
-Make a variable that says how much reserve memory there is
-Make the libraries give a warning instead of an error if they fail to load
-Make a math interrupt call that handles all math in order to use less symbols. The math library can handle it all.
-Making dynamic arrays will be easy if you just make a list of pointers paired with information about the value
-Add a standard call for scripts to change their own settings
-Make the parser count the amount of parameters to a standard call
-Add a way to call functions which pops the current function's operation save off the stack. This will be useful to prevent stack overflows if the parent function is never meant to be returned to.
-Figure out why the code in error.mega doesn't work (It's probably because the operation is skipping the stop)
-Make typedef using the DataType type
-Fix problem with closing bracket next to ternary one operator
-Create script priority levels that tell how often they are executed per cycle
-Add statement length limits to prevent low privilege level scripts from denying the rest of the environment's execution time
-Add a setting for weather or not a script can redefine variables (For memory)
-Make an instance.new() for object classes like roblox
-Make object classes able to inherit from base object classes
-Make a library to manipulate the file system
-Make special memory sections which allow scripts to access them regardless of memory protection settings. Aka, extern.
-Make intelligent and operator that skips the rest of the operation if it's false
-Make a standarized compiled file type for making library templates for MegaScript
-Make the connector operator serve more purposes like getting the length of an array variable
-Make a struct interface for c to access struct members via a string. The struct will be stored as a byte pointer.
-Maybe you could use the roll over when reaching int limit to carry over to another int to make 128 ints
-Add unsigned and long with standard calls, it will be easy
-Maybe 
-Make the spaceof call get the actual size of raw pointer data
-Make a list of addresses in a script so that all of the code can be freed when it is disabled
-Postpone the call operator at symbol when a connector operator comes before it
-Make modulus work on floats
-Make a function for c programs to directly execute MegaScript functions
-Make the objects increment an id in the script environment
-Upgrade the script rule system (For example: Add a setting that tells weather that script is memory protected, as well as weather it can access other scripts' memory)
-Add an object table to the script environment to make it easy to handle all objects
-Make the increment operators define based on weather or not there's a space after the variable so that prefix increment is possible
-Explode
-Make semi colons an optional tool to signify a new operation
-Make right-to-left ignore the previous and the current if the previous is left-to-right
-Make the union elements point to code like strings
-Configure the connector operator //Make the variables turn into elements after the first one at the left
-Configure the connector through pointer operator
-Add a c-like symbol setting to symbols so that it knows what kind of pointer to give (And so that $ and @ can be shared)
-Make an automatic MegaScript function to C function converter
-Add integer to string functions
-Make a math library
-Make the MegaScript source code neater (For example, update the way enabling scripts works)
-Add the end operation opcode to the end of standard calls
-Make includes and requires
-Make definitions basically the same thing as keywords except they're local to each script instead of being shared in the whole environment
-Make a way for the parser to count expected standard call parameters so it doesn't overshoot
-Implement pointer manipulation
-Make dynamic script rule checking
-Configure sub types for c-like pointers
-Die
-Fix new variable memory leaking during jump statements
-Find a way to directly access the c symbol table from MegaScript
-Solve the problems caused by lack of semi-colons
-Make standard calls count expected parameters when parsed
-Use the StopOperationOpcode when finished calling standard calls or bytecodes (maybe)
-Add bytecode status file which tells weather the bytecode is used often, is unused, or is in development
-Make assembly code runner
-Make pseudo numbers
-Make objects
-Make task manager
-Make thread management
-Make script scheduler to determine which scripts should be executed first
-Make classes
-Make switches
-Maybe make the break functions use scope ranges instead of skipping based on stops
-Fuck